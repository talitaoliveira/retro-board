{"version":3,"sources":["serviceWorker.js","components/Column/Column.styled.jsx","components/Task/EmojiPicker.jsx","components/Task/Task.styled.jsx","components/Task/Task.jsx","components/Column/Column.jsx","initial-data.js","App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Container","styled","div","Title","h3","TaskList","props","isDraggingOver","EmojiPicker","React","useState","anchorEl","setAnchorEl","handleClose","open","id","undefined","IconButton","aria-describedby","aria-label","style","align","size","variant","onClick","event","currentTarget","Popover","ref","createRef","onClose","anchorOrigin","vertical","horizontal","transformOrigin","onSelect","onEmojiSelect","isDragging","ReactionContainer","Task","selectedEmojis","setSelectedEmojis","reactions","setReactions","handleReactionIncrease","emoji","handleEmojiSelect","currentEmoji","find","e","draggableId","task","index","provided","snapshot","draggableProps","dragHandleProps","innerRef","Grid","container","alignItems","item","xs","md","content","justify","map","key","Chip","name","label","avatar","Column","column","title","droppableId","droppableProps","tasks","placeholder","initialData","columns","taskIds","columnOrder","App","state","setState","onDragUpdate","update","destination","opacity","Object","keys","length","document","body","backgroundColor","onDragEnd","result","color","source","start","finish","startTaskIds","Array","from","splice","newStart","finishTaskIds","newFinish","newState","newTaskIds","newColumn","columnId","taskId","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.89a41a1f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  margin: 8px;\n  border: 1px solid lightgrey;\n  border-radius: 2px;\n  width: 220px;\n\n  display: flex;\n  flex-direction: column;\n`;\nexport const Title = styled.h3`\n  padding: 8px;\n`;\nexport const TaskList = styled.div`\n  padding: 8px;\n  transition: background-color 0.2 ease;\n  background-color: ${(props) => (props.isDraggingOver ? \"skyblue\" : \"white\")};\n  flex-grow: 1;\n  min-height: 100px;\n`;","import \"emoji-mart/css/emoji-mart.css\";\nimport React from \"react\";\nimport { IconButton, Popover } from \"@material-ui/core\";\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\nimport { Picker } from \"emoji-mart\";\n\nconst EmojiPicker = (props) => {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleSelection = (event) => {\n        props.onEmojiSelect(event)\n        handleClose()\n    };\n\n    const open = Boolean(anchorEl);\n    const id = open ? \"emoji-popover\" : undefined;\n\n    return <div>\n        <IconButton\n            aria-describedby={id}\n            aria-label=\"emoji-picker\"\n            style={{ align: \"right\" }}\n            size=\"small\"\n            variant=\"outlined\"\n            onClick={handleClick}\n        >\n            <InsertEmoticonIcon />\n        </IconButton>\n        <Popover\n            ref={React.createRef()}\n            id={id}\n            open={open}\n            anchorEl={anchorEl}\n            onClose={handleClose}\n            anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"center\",\n            }}\n            transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"center\",\n            }}\n        >\n            <Picker onSelect={handleSelection} />\n        </Popover>\n    </div>\n}\n\nexport default EmojiPicker","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  border: 1px solid lightgrey;\n  border-radius: 2px;\n  padding: 8px;\n  margin-bottom: 8px;\n  background-color: ${(props) => (props.isDragging ? \"lightgreen\" : \"white\")};\n`;\n\nexport const ReactionContainer = styled.div`\n  margin-right: 4px;\n`;","import React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { Grid, Chip } from \"@material-ui/core\";\nimport { Emoji } from \"emoji-mart\";\nimport EmojiPicker from \"./EmojiPicker\"\n\nimport {Container, ReactionContainer} from './Task.styled'\n\nconst Task = (props) => {\n  const [selectedEmojis, setSelectedEmojis] = React.useState([]);\n  const [reactions, setReactions] = React.useState(0);\n\n  const handleReactionIncrease = (emoji) => {\n    emoji.reactions++;\n    setReactions(reactions + 1);\n  }\n\n  const handleEmojiSelect = (emoji) => {\n    const currentEmoji = selectedEmojis.find(e => e.id === emoji.id);\n    if (currentEmoji) {\n      handleReactionIncrease(currentEmoji);\n    } else {\n      emoji.reactions = 1;\n      setSelectedEmojis([...selectedEmojis, emoji]);\n    }\n  };\n\n  return (\n    <Draggable draggableId={props.task.id} index={props.index}>\n      {(provided, snapshot) => (\n        <Container\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n          isDragging={snapshot.isDragging}\n        >\n          <Grid container alignItems=\"center\">\n            <Grid container item xs={11} md={11}>\n              {props.task.content}\n            </Grid>\n            <Grid container justify=\"flex-end\" item xs={1} md={1}>\n              <EmojiPicker onEmojiSelect={handleEmojiSelect} />\n            </Grid>\n            <Grid container item alignItems=\"center\">\n              {selectedEmojis.map((emoji, index) => {\n                return (\n                  <ReactionContainer key={`emoji-reaction-${index}`}>\n                    <Chip\n                      variant=\"outlined\"\n                      size=\"small\"\n                      aria-label={emoji.name}\n                      label={emoji.reactions}\n                      avatar={<Emoji key=\"asd\" emoji={emoji} size={18} />}\n                      onClick={() => handleReactionIncrease(emoji)}\n                    />\n                  </ReactionContainer>\n                );\n              })}\n            </Grid>\n          </Grid>\n        </Container>\n      )}\n    </Draggable>\n  );\n};\n\nexport default Task;\n","import React from \"react\";\nimport {Container, Title, TaskList} from './Column.styled'\nimport Task from \"../Task/Task\";\nimport { Droppable } from \"react-beautiful-dnd\";\n\nconst Column = (props) => {\n  return (\n    <Container>\n      <Title>{props.column.title}</Title>\n      <Droppable droppableId={props.column.id}>\n        {(provided, snapshot) => (\n          <TaskList\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n            isDraggingOver={snapshot.isDraggingOver}\n          >\n            {props.tasks.map((task, index) => (\n              <Task key={task.id} task={task} index={index} />\n            ))}\n            {provided.placeholder}\n          </TaskList>\n        )}\n      </Droppable>\n    </Container>\n  );\n};\n\nexport default Column;\n","const initialData = {\n  tasks: {\n    \"task-1\": { id: \"task-1\", content: \"Take out the garbage\" },\n    \"task-2\": { id: \"task-2\", content: \"Charge my phone\" },\n    \"task-3\": { id: \"task-3\", content: \"Watch Series\" },\n    \"task-4\": { id: \"task-4\", content: \"Cook Dinner\" },\n  },\n  columns: {\n    \"column-1\": {\n      id: \"column-1\",\n      title: \"To Do\",\n      taskIds: [\"task-1\", \"task-2\", \"task-3\", \"task-4\"],\n    },\n    \"column-2\": {\n      id: \"column-2\",\n      title: \"In Progress\",\n      taskIds: [],\n    },\n    \"column-3\": {\n      id: \"column-3\",\n      title: \"Done\",\n      taskIds: [],\n    },\n  },\n  columnOrder: [\"column-1\", \"column-2\", \"column-3\"],\n};\n\nexport default initialData;\n","import React, { useState } from \"react\";\nimport \"@atlaskit/css-reset\";\nimport Column from \"./components/Column/Column\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport initialData from \"./initial-data\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst App = () => {\n  const [state, setState] = useState(initialData);\n\n  const onDragUpdate = (update) => {\n    const { destination } = update;\n    const opacity = destination\n      ? destination.index / Object.keys(state.tasks).length\n      : 0;\n    document.body.style.backgroundColor = `rgba(153, 141, 217, ${opacity})`;\n  };\n\n  const onDragEnd = (result) => {\n    document.body.style.color = \"inherit\";\n    document.body.style.backgroundColor = \"inherit\";\n    const { destination, source, draggableId } = result;\n\n    if (!destination) return;\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    const start = state.columns[source.droppableId];\n    const finish = state.columns[destination.droppableId];\n\n    if(start === finish){\n      const newTaskIds = Array.from(start.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n  \n      const newColumn = {\n        ...start,\n        taskIds: newTaskIds,\n      };\n  \n      const newState = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [newColumn.id]: newColumn,\n        },\n      };\n  \n      setState(newState);\n      return \n    }\n\n    // Moving from one list to another\n    const startTaskIds = Array.from(start.taskIds)\n    startTaskIds.splice(source.index, 1)\n    const newStart = { \n      ...start,\n      taskIds: startTaskIds\n    }\n\n    const finishTaskIds = Array.from(finish.taskIds)\n    finishTaskIds.splice(destination.index, 0, draggableId)\n    const newFinish = { \n      ...finish,\n      taskIds: finishTaskIds\n    }\n\n    const newState = {\n      ...state,\n      columns: {\n        ...state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      },\n    };\n\n    setState(newState);\n     \n    \n  };\n\n  return (\n    <DragDropContext onDragUpdate={onDragUpdate} onDragEnd={onDragEnd}>\n      <Container>\n      {state.columnOrder.map((columnId) => {\n        const column = state.columns[columnId];\n        const tasks = column.taskIds.map((taskId) => state.tasks[taskId]);\n\n        return <Column key={column.id} column={column} tasks={tasks} />;\n      })}\n      </Container>\n    </DragDropContext>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}